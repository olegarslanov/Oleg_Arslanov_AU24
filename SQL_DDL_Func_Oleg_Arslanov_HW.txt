--Task 6. Prepare answers to the following questions

--What operations do the following functions perform: film_in_stock, film_not_in_stock, inventory_in_stock, get_customer_balance,
--inventory_held_by_customer, rewards_report, last_day? You can find these functions in dvd_rental database.

--film_in_stock function. This function determines which copies of a specific film are in stock at a given store. Queries the inventory 
--table to find inventory_id rows. Return a set of inventory_id copies of the film
--film_not_in_stock. Same only if not in stock
--inventory_in_stock. Checks if a specific inventory item is currently available. Not rented or returned. Input: inventory_id. 
--Output: boolean indicating whether item is in stock. Returns boolean (if inventory in stock returns true,
-- and vice versa. firstly it is check like item has never been rented and if not return true, function end. And if rented before check it 
--returned or not. if returned we got true (item in stock)
--get_customer_balance. This function calculate the current balance given a customer_id and a date.  Balance is: rental fees for all rentals +
-- if rentals overdue - payment before. So finaly we got balance how much need pay customer.
--inventory_held_by_customer. This function can give us info about customer who dont return inventory yet. Input: iventory_id. Output: customer_id
--rewards_report. This function returns customers (with all columns) who requirements are fit min_monthly_purchases and
-- min_dollar_amount_purchased numeric. In function we have temporary table tmpCustomer that have all customer_id with accepted parametrs.
--then wee have loop for return all rows with customer with all columns from customer table
--last_day. This function. Give uz last day of month. Input : timestamp. Output:date.



--Why does ‘rewards_report’ function return 0 rows? Correct and recreate the function, so that it's able to return rows properly.

--it is because we use current_date and in DB we dont have data with this dates ... (a change date in function) 


DROP FUNCTION public.rewards_report2(integer, numeric);

CREATE OR REPLACE FUNCTION public.rewards_report2(min_monthly_purchases integer, min_dollar_amount_purchased numeric)
 RETURNS SETOF customer
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
    last_month_start DATE;
    last_month_end DATE;
	rr RECORD;
	tmpSQL TEXT;
BEGIN
    last_month_start := '2017-04-01'::date - '3 month'::interval;
    last_month_start := to_date((extract(YEAR FROM last_month_start) || '-' || extract(MONTH FROM last_month_start) || '-01'),'YYYY-MM-DD');
    last_month_end := LAST_DAY(last_month_start);

    /*
    Create a temporary storage area for Customer IDs.
    */
    CREATE TEMPORARY TABLE tmpCustomer (customer_id INTEGER NOT NULL PRIMARY KEY);
    /*
    Find all customers meeting the monthly purchase requirements
    */

    tmpSQL := 'INSERT INTO tmpCustomer (customer_id)
        SELECT p.customer_id
        FROM payment AS p
        WHERE DATE(p.payment_date) BETWEEN '||quote_literal(last_month_start) ||'::date AND '|| quote_literal(last_month_end) || '::date
        GROUP BY customer_id
        HAVING SUM(p.amount) > '|| min_dollar_amount_purchased ||'
        AND COUNT(customer_id) > '|| min_monthly_purchases ||'' ;

    EXECUTE tmpSQL;
    /*
    Output ALL customer information of matching rewardees.
    Customize output as needed.
    */
    FOR rr IN EXECUTE 'SELECT c.* FROM tmpCustomer AS t INNER JOIN customer AS c ON t.customer_id = c.customer_id' LOOP
        RETURN NEXT rr;
    END LOOP;
		
    /* Clean up */
    tmpSQL := 'DROP TABLE tmpCustomer';
	EXECUTE tmpSQL;

END;
$function$;


select *
from rewards_report2(1, 0.99);


--Is there any function that can potentially be removed from the dvd_rental codebase? If so, which one and why?
 
--we can remove function film_not_in_stock, because we have func film_in_stock and if film in stock we know, esle not in stock

--* The ‘get_customer_balance’ function describes the business requirements for calculating the client balance. Unfortunately, 
--not all of them are implemented in this function. Try to change function using the requirements from the comments.


CREATE OR REPLACE FUNCTION public.get_customer_balance2(p_customer_id integer, p_effective_date timestamp with time zone)
 RETURNS numeric
 LANGUAGE plpgsql
AS $function$
       --#OK, WE NEED TO CALCULATE THE CURRENT BALANCE GIVEN A CUSTOMER_ID AND A DATE
       --#THAT WE WANT THE BALANCE TO BE EFFECTIVE FOR. THE BALANCE IS:
       --#   1) RENTAL FEES FOR ALL PREVIOUS RENTALS
       --#   2) ONE DOLLAR FOR EVERY DAY THE PREVIOUS RENTALS ARE OVERDUE
       --#   3) IF A FILM IS MORE THAN RENTAL_DURATION * 2 OVERDUE, CHARGE THE REPLACEMENT_COST
       --#   4) SUBTRACT ALL PAYMENTS MADE BEFORE THE DATE SPECIFIED
DECLARE
    v_rentfees DECIMAL(5,2); --#FEES PAID TO RENT THE VIDEOS INITIALLY
    v_overfees INTEGER;      --#LATE FEES FOR PRIOR RENTALS
    v_payments DECIMAL(5,2); --#SUM OF PAYMENTS MADE PREVIOUSLY
BEGIN
    
	SELECT COALESCE(SUM(film.rental_rate),0) INTO v_rentfees
    FROM film, inventory, rental
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;

    SELECT COALESCE(SUM(CASE 
		when (rental.return_date - rental.rental_date) > (film.rental_duration * '1 day'::interval) * 2 --check if a film is more than rental_duration * 2 overdue
		then film.replacement_cost --take replacement cost
        WHEN (rental.return_date - rental.rental_date) > (film.rental_duration * '1 day'::interval)
        THEN EXTRACT(epoch FROM ((rental.return_date - rental.rental_date) - (film.rental_duration * '1 day'::interval)))::INTEGER / 86400 -- * 1 dollar
        ELSE 0
        END),0) INTO v_overfees
    FROM rental, inventory, film
    WHERE film.film_id = inventory.film_id
      AND inventory.inventory_id = rental.inventory_id
      AND rental.rental_date <= p_effective_date
      AND rental.customer_id = p_customer_id;

    SELECT COALESCE(SUM(payment.amount),0) INTO v_payments
    FROM payment
    WHERE payment.payment_date <= p_effective_date
    AND payment.customer_id = p_customer_id;

    RETURN v_rentfees + v_overfees - v_payments;
END
$function$;

select *
from public.get_customer_balance2(1, '2017-11-18 12:30:00+03')


--* How do ‘group_concat’ and ‘_group_concat’ functions work? (database creation script might help) Where are they used?
--this is aggregate function. She aggregate text values into one row with contained func _group_concat help (add two text values in one with comma)
-- SFUNC defines function for each row (in our case it is _group_concat)
-- stype defines data type


--* What does ‘last_updated’ function do? Where is it used?
--indicates that this function is a trigger function and will be invoked by a trigger associated with a table. Automatically tracks when each row was last modified.

--* What is tmpSQL variable for in ‘rewards_report’ function? Can this function be recreated without EXECUTE statement and dynamic SQL? Why?
-- It is variable with data type text for store dynamic SQL. it works with temporary table tmpCustomer. Used with Execute, because it contain dynamic SQl and must execute this.
