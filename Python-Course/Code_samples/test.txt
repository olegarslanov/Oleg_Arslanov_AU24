import re
from typing import Dict, List
import json


class InvertedIndex:
    """
    This module is necessary to extract inverted indexes from documents.
    """

    def __init__(self, words_ids: Dict[str, List[int]]):
        self.words_ids = words_ids

    def query(self, words: List[str]) -> List[int]:
        """Return the list of relevant documents for the given query"""

        nested_list = []
        for word in words:
            if word in self.words_ids:
                nested_list.append(self.words_ids[word])

        unique_elements = set()
        for sublist in nested_list:
            for item in sublist:
                unique_elements.add(item)

        query_output = list(unique_elements)

        return query_output

    def dump(self, filepath: str) -> None:
        """
        Allow us to write inverted indexes documents to temporary directory or local storage
        :param filepath: path to file with documents
        :return: None
        """
        with open(filepath, "w", encoding="utf-8") as json_file:
            json.dump(self.words_ids, json_file, ensure_ascii=False, indent=4)

        return None

    @classmethod
    def load(cls, filepath: str):
        """
        Allow us to upload inverted indexes from either temporary directory or local storage
        :param filepath: path to file with documents
        :return: InvertedIndex
        """
        with open(filepath, "r", encoding="utf-8") as json_file:
            words_ids = json.load(json_file)

        return cls(words_ids)


def load_documents(filepath: str) -> Dict[int, str]:
    """
    Allow us to upload documents from either tempopary directory or local storage
    :param filepath: path to file with documents
    :return: Dict[int, str]
    """

    documents = {}  # inicializiruju pustoj slovar
    with open(filepath, 'r', encoding='utf-8') as file:
        for line in file:  # iteriruju po linijam teksta
            doc_id, content = line.lower().split("    ", 1)  # razdeliaju po tabuliacij na dve chasti
            doc_id = int(doc_id)
            words = re.split(r"\W+", content)
            documents[doc_id] = ' '.join(words).strip()  # dobaliaju v slovar key:value

    return documents


#documents = load_documents("wikipedia_sample.txt")
#print(documents)


def build_inverted_index(documents: Dict[int, str]): #-> InvertedIndex:
    """
    Builder of inverted indexes based on documents
    :param documents: dict with documents
    :return: InvertedIndex class
    """
    # nado iz documents {int:str} sozdat words_ids {str, List[int]]} dlja podachi v class InvertedIndex
    words_ids = {}

    for key, value in documents.items():
        key, value = value, key
        for word in key.split(' '):
            if word not in words_ids:
                words_ids[word] = set()  # ispolzuju mnozhestvo dlja hranenije bez duplikatov
            words_ids[word].add(value)

    for word in words_ids:  # preobrazuju nazad value v list
        words_ids[word] = list(words_ids[word])

    inverted_index = InvertedIndex(words_ids)  # sozdaju objekt klassa InvertedIndex()
    return inverted_index  # poluchaju ekzempliar class



global_filepath = "wikipedia_sample.txt"
documents = load_documents(global_filepath)
inverted_index = build_inverted_index(documents)

inverted_index.dump("inverted_index.json")

loaded_inverted_index = InvertedIndex.load("inverted_index.json")

print(loaded_inverted_index.words_ids)

words = ['a', 'is', 'animalia']
print(inverted_index.query(words))